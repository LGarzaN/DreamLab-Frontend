import React from 'react'
function obtenerFechasSemana() {
    const hoy = new Date(); // Fecha de hoy
    const fechaHoy = hoy.toISOString().split('T')[0]; // Formato "aaaa-mm-dd"

    const fechasSemana = [fechaHoy]; // Inicializamos con la fecha de hoy

    // Añadimos las fechas de los próximos 6 días, excluyendo los domingos
    for (let i = 1; i <= 6; ) {
        const siguienteDia = new Date();
        siguienteDia.setDate(hoy.getDate() + i);
        
        // Solo añadimos si el día no es domingo (0)
        if (siguienteDia.getDay() !== 0) {
            const fechaSiguiente = siguienteDia.toISOString().split('T')[0];
            fechasSemana.push(fechaSiguiente);
            i++;
        }
    }

    return fechasSemana;
}


function Prueba() {
    const fechas = obtenerFechasSemana();
    return (
        <div>
            {fechas.map((item, index) => (
                <div key={index}>{item}</div>
            ))}
        </div>
    );
}


export default Prueba



"use client";
import React from "react";
import { useSearchParams } from "next/navigation";
import { data } from "@/data/areas_data";
import { reservation_data } from "@/data/reservation_data";
import { useEffect, useState } from 'react';
import Fechas from "../components/Fechas";
import Prueba from "../components/Prueba";

// default
function getName(id: number) {
  const area = data.find((area) => area.id === id);
  return area ? area.name : null;
}

// en vez de traer los datos de reservation_data traelos de la bd
// filtrar por id y dia, las horas disponibles
function getAvailableStartHours(spaceId: number, day: string): string[] {
  const filteredReservations = reservation_data.filter(reservation => {
      return reservation.SpaceId === spaceId && reservation.Day === day && !reservation.Occupied;
  });

  const availableStartHours = filteredReservations.map(reservation => reservation.StartHour);

  return availableStartHours;
}

function ReservaHora() {
  const sp = useSearchParams();
  const id_temporal = sp.get("id") || "1";
  const id = parseInt(id_temporal);

  const [horasDisponibles, setHorasDisponibles] = useState<string[]>([]);

  useEffect(() => {
      const availableStartHours = getAvailableStartHours(id, "2024-04-12");
      setHorasDisponibles(availableStartHours);
  }, [id]);

  return (
      <div>
          <div>
              <h3>Horas disponibles:</h3>
              <ul>
                  {horasDisponibles.map((hora, index) => (
                      <li key={index}>{hora}</li>
                  ))}
              </ul>
          </div>
          <Fechas/>
          <Prueba/>
      </div>
  );
}
export default ReservaHora;
